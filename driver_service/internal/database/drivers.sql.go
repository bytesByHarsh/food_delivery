// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: drivers.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createDriver = `-- name: CreateDriver :one
INSERT INTO drivers(id, name, phone_num, email, username,
                  profile_img, is_superuser, hashed_password, age,
                  created_at, updated_at, deleted_at, is_deleted)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
RETURNING id, name, phone_num, email, username, profile_img, is_superuser, hashed_password, age, created_at, updated_at, deleted_at, is_deleted
`

type CreateDriverParams struct {
	ID             uuid.UUID
	Name           string
	PhoneNum       string
	Email          string
	Username       string
	ProfileImg     string
	IsSuperuser    bool
	HashedPassword string
	Age            int32
	CreatedAt      time.Time
	UpdatedAt      time.Time
	DeletedAt      sql.NullTime
	IsDeleted      bool
}

func (q *Queries) CreateDriver(ctx context.Context, arg CreateDriverParams) (Driver, error) {
	row := q.db.QueryRowContext(ctx, createDriver,
		arg.ID,
		arg.Name,
		arg.PhoneNum,
		arg.Email,
		arg.Username,
		arg.ProfileImg,
		arg.IsSuperuser,
		arg.HashedPassword,
		arg.Age,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
		arg.IsDeleted,
	)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNum,
		&i.Email,
		&i.Username,
		&i.ProfileImg,
		&i.IsSuperuser,
		&i.HashedPassword,
		&i.Age,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsDeleted,
	)
	return i, err
}

const deleteDriver = `-- name: DeleteDriver :exec
UPDATE drivers
SET deleted_at = $2,
    is_deleted = true,
    updated_at = $3
WHERE id = $1
RETURNING id, name, phone_num, email, username, profile_img, is_superuser, hashed_password, age, created_at, updated_at, deleted_at, is_deleted
`

type DeleteDriverParams struct {
	ID        uuid.UUID
	DeletedAt sql.NullTime
	UpdatedAt time.Time
}

func (q *Queries) DeleteDriver(ctx context.Context, arg DeleteDriverParams) error {
	_, err := q.db.ExecContext(ctx, deleteDriver, arg.ID, arg.DeletedAt, arg.UpdatedAt)
	return err
}

const getAllDrivers = `-- name: GetAllDrivers :many
SELECT id, name, phone_num, email, username, profile_img, is_superuser, hashed_password, age, created_at, updated_at, deleted_at, is_deleted
FROM
    drivers
WHERE is_deleted = false
ORDER BY
    name ASC
LIMIT $1 OFFSET $2
`

type GetAllDriversParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetAllDrivers(ctx context.Context, arg GetAllDriversParams) ([]Driver, error) {
	rows, err := q.db.QueryContext(ctx, getAllDrivers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Driver
	for rows.Next() {
		var i Driver
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PhoneNum,
			&i.Email,
			&i.Username,
			&i.ProfileImg,
			&i.IsSuperuser,
			&i.HashedPassword,
			&i.Age,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDriverByEmail = `-- name: GetDriverByEmail :one
SELECT id, name, phone_num, email, username, profile_img, is_superuser, hashed_password, age, created_at, updated_at, deleted_at, is_deleted from drivers WHERE email=$1 AND is_deleted = false
`

func (q *Queries) GetDriverByEmail(ctx context.Context, email string) (Driver, error) {
	row := q.db.QueryRowContext(ctx, getDriverByEmail, email)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNum,
		&i.Email,
		&i.Username,
		&i.ProfileImg,
		&i.IsSuperuser,
		&i.HashedPassword,
		&i.Age,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getDriverById = `-- name: GetDriverById :one
SELECT id, name, phone_num, email, username, profile_img, is_superuser, hashed_password, age, created_at, updated_at, deleted_at, is_deleted from drivers WHERE id=$1 AND is_deleted = false
`

func (q *Queries) GetDriverById(ctx context.Context, id uuid.UUID) (Driver, error) {
	row := q.db.QueryRowContext(ctx, getDriverById, id)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNum,
		&i.Email,
		&i.Username,
		&i.ProfileImg,
		&i.IsSuperuser,
		&i.HashedPassword,
		&i.Age,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getDriverByUsername = `-- name: GetDriverByUsername :one
SELECT id, name, phone_num, email, username, profile_img, is_superuser, hashed_password, age, created_at, updated_at, deleted_at, is_deleted from drivers WHERE username=$1 AND is_deleted = false
`

func (q *Queries) GetDriverByUsername(ctx context.Context, username string) (Driver, error) {
	row := q.db.QueryRowContext(ctx, getDriverByUsername, username)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNum,
		&i.Email,
		&i.Username,
		&i.ProfileImg,
		&i.IsSuperuser,
		&i.HashedPassword,
		&i.Age,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getDriverCount = `-- name: GetDriverCount :one
SELECT COUNT(*) FROM drivers WHERE is_deleted=false
`

func (q *Queries) GetDriverCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getDriverCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const hardDeleteUser = `-- name: HardDeleteUser :exec
DELETE FROM drivers
WHERE id = $1
`

func (q *Queries) HardDeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, hardDeleteUser, id)
	return err
}

const updateDriver = `-- name: UpdateDriver :exec
UPDATE drivers
SET updated_at = $2,
    name = $3,
    phone_num = $4,
    email = $5,
    username = $6,
    profile_img = $7,
    age = $8
WHERE id = $1 AND is_deleted=false
RETURNING id, name, phone_num, email, username, profile_img, is_superuser, hashed_password, age, created_at, updated_at, deleted_at, is_deleted
`

type UpdateDriverParams struct {
	ID         uuid.UUID
	UpdatedAt  time.Time
	Name       string
	PhoneNum   string
	Email      string
	Username   string
	ProfileImg string
	Age        int32
}

func (q *Queries) UpdateDriver(ctx context.Context, arg UpdateDriverParams) error {
	_, err := q.db.ExecContext(ctx, updateDriver,
		arg.ID,
		arg.UpdatedAt,
		arg.Name,
		arg.PhoneNum,
		arg.Email,
		arg.Username,
		arg.ProfileImg,
		arg.Age,
	)
	return err
}

const updateDriverPassword = `-- name: UpdateDriverPassword :exec
UPDATE drivers
SET hashed_password=$2,
    updated_at = $3
WHERE id = $1 AND is_deleted = false
RETURNING id, name, phone_num, email, username, profile_img, is_superuser, hashed_password, age, created_at, updated_at, deleted_at, is_deleted
`

type UpdateDriverPasswordParams struct {
	ID             uuid.UUID
	HashedPassword string
	UpdatedAt      time.Time
}

func (q *Queries) UpdateDriverPassword(ctx context.Context, arg UpdateDriverPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateDriverPassword, arg.ID, arg.HashedPassword, arg.UpdatedAt)
	return err
}

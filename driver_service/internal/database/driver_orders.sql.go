// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: driver_orders.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO driver_orders(id, driver_id, order_id,
                         restaurant_id, restaurant_name, restaurant_addr, restaurant_lat , restaurant_long,
                         customer_id, customer_addr, customer_name, customer_phone, customer_lat, customer_long,
                         status, delivery_distance, earning, tip, is_cash_payment, cash_amount,
                         created_at, assigned_at, updated_at, deleted_at, is_deleted)
VALUES ($1, $2, $3,
        $4, $5, $6, $7, $8,
        $9, $10, $11, $12, $13, $14,
        $15, $16, $17, $18, $19, $20,
        $21, $22, $23, $24, false)
RETURNING id, driver_id, order_id, restaurant_id, restaurant_name, restaurant_addr, restaurant_lat, restaurant_long, customer_id, customer_addr, customer_name, customer_phone, customer_lat, customer_long, status, delivery_distance, earning, tip, is_cash_payment, cash_amount, created_at, assigned_at, updated_at, deleted_at, is_deleted
`

type CreateOrderParams struct {
	ID               uuid.UUID
	DriverID         uuid.NullUUID
	OrderID          uuid.UUID
	RestaurantID     uuid.UUID
	RestaurantName   string
	RestaurantAddr   string
	RestaurantLat    string
	RestaurantLong   string
	CustomerID       uuid.UUID
	CustomerAddr     string
	CustomerName     string
	CustomerPhone    string
	CustomerLat      string
	CustomerLong     string
	Status           NullOrderStatus
	DeliveryDistance float64
	Earning          float64
	Tip              int32
	IsCashPayment    bool
	CashAmount       float64
	CreatedAt        time.Time
	AssignedAt       time.Time
	UpdatedAt        time.Time
	DeletedAt        sql.NullTime
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (DriverOrder, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.ID,
		arg.DriverID,
		arg.OrderID,
		arg.RestaurantID,
		arg.RestaurantName,
		arg.RestaurantAddr,
		arg.RestaurantLat,
		arg.RestaurantLong,
		arg.CustomerID,
		arg.CustomerAddr,
		arg.CustomerName,
		arg.CustomerPhone,
		arg.CustomerLat,
		arg.CustomerLong,
		arg.Status,
		arg.DeliveryDistance,
		arg.Earning,
		arg.Tip,
		arg.IsCashPayment,
		arg.CashAmount,
		arg.CreatedAt,
		arg.AssignedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
	)
	var i DriverOrder
	err := row.Scan(
		&i.ID,
		&i.DriverID,
		&i.OrderID,
		&i.RestaurantID,
		&i.RestaurantName,
		&i.RestaurantAddr,
		&i.RestaurantLat,
		&i.RestaurantLong,
		&i.CustomerID,
		&i.CustomerAddr,
		&i.CustomerName,
		&i.CustomerPhone,
		&i.CustomerLat,
		&i.CustomerLong,
		&i.Status,
		&i.DeliveryDistance,
		&i.Earning,
		&i.Tip,
		&i.IsCashPayment,
		&i.CashAmount,
		&i.CreatedAt,
		&i.AssignedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getAllOrder = `-- name: GetAllOrder :many
SELECT id, driver_id, order_id, restaurant_id, restaurant_name, restaurant_addr, restaurant_lat, restaurant_long, customer_id, customer_addr, customer_name, customer_phone, customer_lat, customer_long, status, delivery_distance, earning, tip, is_cash_payment, cash_amount, created_at, assigned_at, updated_at, deleted_at, is_deleted
FROM
    driver_orders
WHERE is_deleted = false
ORDER BY
    updated_at DESC
LIMIT $1 OFFSET $2
`

type GetAllOrderParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetAllOrder(ctx context.Context, arg GetAllOrderParams) ([]DriverOrder, error) {
	rows, err := q.db.QueryContext(ctx, getAllOrder, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DriverOrder
	for rows.Next() {
		var i DriverOrder
		if err := rows.Scan(
			&i.ID,
			&i.DriverID,
			&i.OrderID,
			&i.RestaurantID,
			&i.RestaurantName,
			&i.RestaurantAddr,
			&i.RestaurantLat,
			&i.RestaurantLong,
			&i.CustomerID,
			&i.CustomerAddr,
			&i.CustomerName,
			&i.CustomerPhone,
			&i.CustomerLat,
			&i.CustomerLong,
			&i.Status,
			&i.DeliveryDistance,
			&i.Earning,
			&i.Tip,
			&i.IsCashPayment,
			&i.CashAmount,
			&i.CreatedAt,
			&i.AssignedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderByCustomerId = `-- name: GetOrderByCustomerId :many
SELECT id, driver_id, order_id, restaurant_id, restaurant_name, restaurant_addr, restaurant_lat, restaurant_long, customer_id, customer_addr, customer_name, customer_phone, customer_lat, customer_long, status, delivery_distance, earning, tip, is_cash_payment, cash_amount, created_at, assigned_at, updated_at, deleted_at, is_deleted
FROM
    driver_orders
WHERE
    customer_id=$1 AND is_deleted = false
ORDER BY
    updated_at DESC
LIMIT $1 OFFSET $2
`

type GetOrderByCustomerIdParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetOrderByCustomerId(ctx context.Context, arg GetOrderByCustomerIdParams) ([]DriverOrder, error) {
	rows, err := q.db.QueryContext(ctx, getOrderByCustomerId, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DriverOrder
	for rows.Next() {
		var i DriverOrder
		if err := rows.Scan(
			&i.ID,
			&i.DriverID,
			&i.OrderID,
			&i.RestaurantID,
			&i.RestaurantName,
			&i.RestaurantAddr,
			&i.RestaurantLat,
			&i.RestaurantLong,
			&i.CustomerID,
			&i.CustomerAddr,
			&i.CustomerName,
			&i.CustomerPhone,
			&i.CustomerLat,
			&i.CustomerLong,
			&i.Status,
			&i.DeliveryDistance,
			&i.Earning,
			&i.Tip,
			&i.IsCashPayment,
			&i.CashAmount,
			&i.CreatedAt,
			&i.AssignedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderByDriverId = `-- name: GetOrderByDriverId :many
SELECT id, driver_id, order_id, restaurant_id, restaurant_name, restaurant_addr, restaurant_lat, restaurant_long, customer_id, customer_addr, customer_name, customer_phone, customer_lat, customer_long, status, delivery_distance, earning, tip, is_cash_payment, cash_amount, created_at, assigned_at, updated_at, deleted_at, is_deleted
FROM
    driver_orders
WHERE
    driver_id=$1 AND is_deleted = false
ORDER BY
    updated_at DESC
LIMIT $1 OFFSET $2
`

type GetOrderByDriverIdParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetOrderByDriverId(ctx context.Context, arg GetOrderByDriverIdParams) ([]DriverOrder, error) {
	rows, err := q.db.QueryContext(ctx, getOrderByDriverId, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DriverOrder
	for rows.Next() {
		var i DriverOrder
		if err := rows.Scan(
			&i.ID,
			&i.DriverID,
			&i.OrderID,
			&i.RestaurantID,
			&i.RestaurantName,
			&i.RestaurantAddr,
			&i.RestaurantLat,
			&i.RestaurantLong,
			&i.CustomerID,
			&i.CustomerAddr,
			&i.CustomerName,
			&i.CustomerPhone,
			&i.CustomerLat,
			&i.CustomerLong,
			&i.Status,
			&i.DeliveryDistance,
			&i.Earning,
			&i.Tip,
			&i.IsCashPayment,
			&i.CashAmount,
			&i.CreatedAt,
			&i.AssignedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderById = `-- name: GetOrderById :one
SELECT id, driver_id, order_id, restaurant_id, restaurant_name, restaurant_addr, restaurant_lat, restaurant_long, customer_id, customer_addr, customer_name, customer_phone, customer_lat, customer_long, status, delivery_distance, earning, tip, is_cash_payment, cash_amount, created_at, assigned_at, updated_at, deleted_at, is_deleted from driver_orders WHERE id=$1 AND is_deleted = false
`

func (q *Queries) GetOrderById(ctx context.Context, id uuid.UUID) (DriverOrder, error) {
	row := q.db.QueryRowContext(ctx, getOrderById, id)
	var i DriverOrder
	err := row.Scan(
		&i.ID,
		&i.DriverID,
		&i.OrderID,
		&i.RestaurantID,
		&i.RestaurantName,
		&i.RestaurantAddr,
		&i.RestaurantLat,
		&i.RestaurantLong,
		&i.CustomerID,
		&i.CustomerAddr,
		&i.CustomerName,
		&i.CustomerPhone,
		&i.CustomerLat,
		&i.CustomerLong,
		&i.Status,
		&i.DeliveryDistance,
		&i.Earning,
		&i.Tip,
		&i.IsCashPayment,
		&i.CashAmount,
		&i.CreatedAt,
		&i.AssignedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getOrderByOrderId = `-- name: GetOrderByOrderId :one
SELECT id, driver_id, order_id, restaurant_id, restaurant_name, restaurant_addr, restaurant_lat, restaurant_long, customer_id, customer_addr, customer_name, customer_phone, customer_lat, customer_long, status, delivery_distance, earning, tip, is_cash_payment, cash_amount, created_at, assigned_at, updated_at, deleted_at, is_deleted from driver_orders WHERE order_id=$1 AND is_deleted = false
`

func (q *Queries) GetOrderByOrderId(ctx context.Context, orderID uuid.UUID) (DriverOrder, error) {
	row := q.db.QueryRowContext(ctx, getOrderByOrderId, orderID)
	var i DriverOrder
	err := row.Scan(
		&i.ID,
		&i.DriverID,
		&i.OrderID,
		&i.RestaurantID,
		&i.RestaurantName,
		&i.RestaurantAddr,
		&i.RestaurantLat,
		&i.RestaurantLong,
		&i.CustomerID,
		&i.CustomerAddr,
		&i.CustomerName,
		&i.CustomerPhone,
		&i.CustomerLat,
		&i.CustomerLong,
		&i.Status,
		&i.DeliveryDistance,
		&i.Earning,
		&i.Tip,
		&i.IsCashPayment,
		&i.CashAmount,
		&i.CreatedAt,
		&i.AssignedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsDeleted,
	)
	return i, err
}

const updateOrderDriver = `-- name: UpdateOrderDriver :exec
UPDATE driver_orders
SET driver_id=$2,
    updated_at=$3,
    assigned_at=$4
WHERE id = $1 AND is_deleted=false
RETURNING id, driver_id, order_id, restaurant_id, restaurant_name, restaurant_addr, restaurant_lat, restaurant_long, customer_id, customer_addr, customer_name, customer_phone, customer_lat, customer_long, status, delivery_distance, earning, tip, is_cash_payment, cash_amount, created_at, assigned_at, updated_at, deleted_at, is_deleted
`

type UpdateOrderDriverParams struct {
	ID         uuid.UUID
	DriverID   uuid.NullUUID
	UpdatedAt  time.Time
	AssignedAt time.Time
}

func (q *Queries) UpdateOrderDriver(ctx context.Context, arg UpdateOrderDriverParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderDriver,
		arg.ID,
		arg.DriverID,
		arg.UpdatedAt,
		arg.AssignedAt,
	)
	return err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE driver_orders
SET status=$2,
    updated_at=$3
WHERE id = $1 AND is_deleted=false
RETURNING id, driver_id, order_id, restaurant_id, restaurant_name, restaurant_addr, restaurant_lat, restaurant_long, customer_id, customer_addr, customer_name, customer_phone, customer_lat, customer_long, status, delivery_distance, earning, tip, is_cash_payment, cash_amount, created_at, assigned_at, updated_at, deleted_at, is_deleted
`

type UpdateOrderStatusParams struct {
	ID        uuid.UUID
	Status    NullOrderStatus
	UpdatedAt time.Time
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatus, arg.ID, arg.Status, arg.UpdatedAt)
	return err
}
